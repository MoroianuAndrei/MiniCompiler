//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/andre/Desktop/Facultate Informatica/Licenta/Anul 2/Semestrul 1/Limbaje Formale si Compilatoare/Tema Obligatorii/Tema 2/MiniCompiler/Tema/Tema/BasicLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="BasicLanguageParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IBasicLanguageVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] BasicLanguageParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] BasicLanguageParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamList([NotNull] BasicLanguageParser.ParamListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.globalVar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobalVar([NotNull] BasicLanguageParser.GlobalVarContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] BasicLanguageParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] BasicLanguageParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] BasicLanguageParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] BasicLanguageParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] BasicLanguageParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] BasicLanguageParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] BasicLanguageParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] BasicLanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] BasicLanguageParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BasicLanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] BasicLanguageParser.ExpressionListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PlusExpression</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusExpression([NotNull] BasicLanguageParser.PlusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallEx</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallEx([NotNull] BasicLanguageParser.FunctionCallExContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LT</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLT([NotNull] BasicLanguageParser.LTContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EQ</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEQ([NotNull] BasicLanguageParser.EQContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GT</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGT([NotNull] BasicLanguageParser.GTContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivideExpression([NotNull] BasicLanguageParser.DivideExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] BasicLanguageParser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] BasicLanguageParser.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LparenRparen</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLparenRparen([NotNull] BasicLanguageParser.LparenRparenContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinusExpression([NotNull] BasicLanguageParser.MinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NE</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNE([NotNull] BasicLanguageParser.NEContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LE</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLE([NotNull] BasicLanguageParser.LEContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Id</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitId([NotNull] BasicLanguageParser.IdContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TimesExpression</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTimesExpression([NotNull] BasicLanguageParser.TimesExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GE</c>
	/// labeled alternative in <see cref="BasicLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGE([NotNull] BasicLanguageParser.GEContext context);
}
